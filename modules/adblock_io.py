#!/usr/bin/env python
# -*- coding: UTF-8 -*-

"""
Copyright (c) 2013, David Silva
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.
    * Neither the name of the <organization> nor the
        names of its contributors may be used to endorse or promote products
        derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

import adblock_http
import os
import tempfile
import shutil

# hosts file
HOSTS_FILE = "/etc/hosts"

# MVPS content filters
MVPS_START_STR = "# [Start of entries generated by MVPS HOSTS]"
MVPS_END_STR = "# [end of entries generated by MVPS HOSTS]"

def __read_and_filter_hosts_file():
    """
    Reads and filters the hosts file contents
    with the MVPS related contents
    """
    read_mvps = False
    data = ''
    with open(HOSTS_FILE, 'r') as ofp:
        for line in ofp:
            if len(line) > 0:
                line = line.strip('\n')
                read_mvps = read_mvps or line == MVPS_START_STR
                if line == MVPS_END_STR:
                    break
                elif read_mvps and not line == '#':
                    data += line + '\n'
    size = len(data)
    return data[len(MVPS_START_STR)+1:size-1] if size > 0 else None

def apply_changes_to_local_hosts(deleted, added):
    """
    Applies the given changes to the local hosts file
    """
    if len(deleted) == 0 and len(added) == 0:
        return
    # create a temporary file
    import time
    utc_ts = int(time.time())
    pre = 'hosts.%d' % utc_ts
    suf = '.adblock'
    with tempfile.NamedTemporaryFile(prefix=pre, suffix=suf) as tmp_file:
        in_mvps = False
        # write the hosts to a temporary file
        with open(HOSTS_FILE, 'r') as ofp:
            prev_mpvps_found = False
            for line in ofp:
                line = line.strip('\n')
                in_mvps = in_mvps or line == MVPS_START_STR
                if line == MVPS_END_STR and in_mvps:
                    in_mvps = False
                    prev_mpvps_found = True
                    for entry in added:
                        __write(tmp_file, entry[2:])
                if not in_mvps or (in_mvps and line not in deleted):
                    __write(tmp_file, line)
            if not prev_mpvps_found:
                # first entries!
                tmp_file.write('\n%s\n#\n' % MVPS_START_STR)
                for entry in added:
                    __write(tmp_file, entry[2:])
                __write(tmp_file, '%s\n' % MVPS_END_STR)
        # everything written to the tmp file
        # now replace the original host contents
        shutil.copyfile(tmp_file.name, HOSTS_FILE)

def __write(file_p, content):
    """
    Writes the content to fp and flushes if necessary
    """
    file_p.write('%s\n' % content)
    file_p.flush()

def read_local_hosts():
    """
    Reads the current hosts file contents
    and filters it with the related MVPS information
    """
    return __read_and_filter_hosts_file()

def has_rw_permission_local_hosts():
    """
    Check if the user currently executing the script has
    read-write access to the local hosts file
    """
    return os.access(HOSTS_FILE, os.W_OK) and os.access(HOSTS_FILE, os.R_OK)
